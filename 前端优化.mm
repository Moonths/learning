{"objectClass":"NSDictionary","root":{"objectClass":"MindNode","ID":"T1WVD","rootPoint":{"objectClass":"CGPoint","x":360,"y":2517.5},"children":{"0":{"objectClass":"MindNode","ID":"5KQI7","children":{"0":{"objectClass":"MindNode","ID":"55QZ1","children":{"0":{"objectClass":"MindNode","ID":"HANJI","children":{"0":{"objectClass":"MindNode","ID":"VX742","text":"thread-loader\n多进程打包，可以大大提高构建的速度，使用方法是将thread-loader放在比较费时间的loader之前，比如babel-loader"},"1":{"objectClass":"MindNode","ID":"3VZ6R","text":"cache-loader\n缓存资源，提高二次构建的速度，使用方法是将cache-loader放在比较费时间的loader之前，比如babel-loader"},"2":{"objectClass":"MindNode","ID":"CY406","text":"exclude & include\nexclude：不需要处理的文件\ninclude：需要处理的文件"},"3":{"objectClass":"MindNode","ID":"F9EVN","text":"构建区分环境\n\n开发环境：去除代码压缩、gzip、体积分析等优化的配置，大大提高构建速度\n生产环境：需要代码压缩、gzip、体积分析等优化的配置，大大降低最终项目打包体积\n"},"objectClass":"NSArray"},"text":"构建时间优化"},"1":{"objectClass":"MindNode","ID":"V165X","children":{"0":{"objectClass":"MindNode","ID":"6X1O2","text":"CSS代码压缩\nCSS代码压缩使用css-minimizer-webpack-plugin，效果包括压缩、去重"},"1":{"objectClass":"MindNode","ID":"4D664","text":"JS代码压缩\nJS代码压缩使用terser-webpack-plugin，实现打包后JS代码的压缩"},"2":{"objectClass":"MindNode","ID":"48259","text":"tree-shaking\ntree-shaking简单说作用就是：只打包用到的代码，没用到的代码不打包，而webpack5默认开启tree-shaking，当打包的mode为production时，自动开启tree-shaking进行优化"},"3":{"objectClass":"MindNode","ID":"327LX","text":"source-map类型\nsource-map的作用是：方便你报错的时候能定位到错误代码的位置。它的体积不容小觑，所以对于不同环境设置不同的类型是很有必要的。"},"4":{"objectClass":"MindNode","ID":"L521U","text":"打包体积分析\n使用webpack-bundle-analyzer可以审查打包后的体积分布，进而进行相应的体积优化"},"5":{"objectClass":"MindNode","ID":"K6I3S","text":""},"objectClass":"NSArray"},"text":"打包体积优化"},"2":{"objectClass":"MindNode","ID":"0TZNO","children":{"0":{"objectClass":"MindNode","ID":"4PQE1","text":"模块懒加载\n如果不进行模块懒加载的话，最后整个项目代码都会被打包到一个js文件里，单个js文件体积非常大，那么当用户网页请求的时候，首屏加载时间会比较长，使用模块懒加载之后，大js文件会分成多个小js文件，网页加载时会按需加载，大大提升首屏加载速度\n\n    path: '/home',\n    name: 'home',\n    // 懒加载\n    component: () => import('../views/home/home.vue'),"},"1":{"objectClass":"MindNode","ID":"49H8K","text":"Gzip\n开启Gzip后，大大提高用户的页面加载速度，因为gzip的体积比原文件小很多，当然需要后端的配合，使用compression-webpack-plugin\n\nconst CompressionPlugin = require('compression-webpack-plugin')\n\n  plugins: [\n    // 之前的代码...\n    \n    // gzip\n    new CompressionPlugin({\n      algorithm: 'gzip',\n      threshold: 10240,\n      minRatio: 0.8\n    })\n  ]\n"},"2":{"objectClass":"MindNode","ID":"7714B","text":"小图片转base64\n对于一些小图片，可以转base64，这样可以减少用户的http网络请求次数，提高用户的体验。webpack5中url-loader已被废弃，改用asset-module\n\n{\n   test: /\\.(png|jpe?g|gif|svg|webp)$/,\n   type: 'asset',\n   parser: {\n     // 转base64的条件\n     dataUrlCondition: {\n        maxSize: 25 * 1024, // 25kb\n     }\n   },\n   generator: {\n     // 打包到 image 文件下\n    filename: 'images/[contenthash][ext][query]',\n   },\n},\n"},"3":{"objectClass":"MindNode","ID":"E8OJ5","text":"合理配置hash\n我们要保证，改过的文件需要更新hash值，而没改过的文件依然保持原本的hash值，这样才能保证在上线后，浏览器访问时没有改变的文件会命中缓存，从而达到性能优化的目的\n\n  output: {\n    path: path.resolve(__dirname, '../dist'),\n    // 给js文件加上 contenthash\n    filename: 'js/chunk-[contenthash].js',\n    clean: true,\n  }"},"4":{"objectClass":"MindNode","ID":"V01UP","text":"WebP"},"objectClass":"NSArray"},"text":"用户体验优化"},"objectClass":"NSArray"},"text":"webpack"},"objectClass":"NSArray"},"text":"打包优化"},"1":{"objectClass":"MindNode","ID":"NEFJ5","children":{"0":{"objectClass":"MindNode","ID":"42TWP","children":{"0":{"objectClass":"MindNode","ID":"O8SF8","text":"data-xxx属性来储存图片的路径，在需要加载图片的时候，将data-xxx中图片的路径赋值给src"},"1":{"objectClass":"MindNode","ID":"B3213","text":"Intersection Observer是HTML5新增的API，可以用来实现图片懒加载\n实现一个v-lazy"},"2":{"objectClass":"MindNode","ID":"G4745","text":"lozad.js 是超轻量级且只使用 Intersection Observer 的库"},"objectClass":"NSArray"},"text":"懒加载"},"1":{"objectClass":"MindNode","ID":"3G3Y7","children":{"0":{"objectClass":"MindNode","ID":"779V8","children":{"0":{"objectClass":"MindNode","ID":"6I94V","text":"<meta http-equiv=\"x-dns-prefetch-control\" content=\"on\">\n// off 则是关闭\n也可以通过在服务器端发送 X-DNS-Prefetch-Control 报头"},"1":{"objectClass":"MindNode","ID":"1W875","text":"手动添加解析\n<link rel=\"dns-prefetch\" href=\"http://www.google.com\">"},"objectClass":"NSArray"},"text":"DNS预解析\n（dns-prefetch）"},"1":{"objectClass":"MindNode","ID":"X99IP","text":"preload"},"2":{"objectClass":"MindNode","ID":"G8483","text":"prefetch"},"3":{"objectClass":"MindNode","ID":"EIG09","text":"preconnect"},"objectClass":"NSArray"},"text":"<link rel=xxx>"},"2":{"objectClass":"MindNode","ID":"177B4","children":{"0":{"objectClass":"MindNode","ID":"OHY2K","text":"        plugins: [\n          new compressionPlugin({\n            test: /\\.(js|css)$/, // 匹配文件名\n            threshold: 10240, // 超过10kb的数据才压缩\n            deleteOriginalAssets: false, // 是否删除原文件\n          }),\n"},"objectClass":"NSArray"},"text":"gzip压缩"},"3":{"objectClass":"MindNode","ID":"3VSY2","children":{"0":{"objectClass":"MindNode","ID":"7F8DQ","text":""},"objectClass":"NSArray"},"text":"生产关闭sourcemap"},"4":{"objectClass":"MindNode","ID":"XWYZ5","text":"CDN减少打包体积"},"5":{"objectClass":"MindNode","ID":"P8DL6","children":{"0":{"objectClass":"MindNode","ID":"E83J7","text":"ssr"},"1":{"objectClass":"MindNode","ID":"3RLK8","text":"prerender-spa-plugin"},"objectClass":"NSArray"},"text":"预渲染"},"6":{"objectClass":"MindNode","ID":"2Y3QQ","children":{"0":{"objectClass":"MindNode","ID":"6G1B3","children":{"0":{"objectClass":"MindNode","ID":"6A480","children":{"0":{"objectClass":"MindNode","ID":"852I9","text":"Push Cache"},"objectClass":"NSArray"},"text":" Disk Cache"},"objectClass":"NSArray"},"text":"Memory Cache"},"objectClass":"NSArray"},"text":"ServiceWorker(仅支持https)"},"7":{"objectClass":"MindNode","ID":"35JSU","children":{"0":{"objectClass":"MindNode","ID":"5X2H8","children":{"0":{"objectClass":"MindNode","ID":"LE6HK","children":{"0":{"objectClass":"MindNode","ID":"6R5QQ","children":{"0":{"objectClass":"MindNode","ID":"N8QR6","text":"public: 可以在客户端和代理服务缓存"},"1":{"objectClass":"MindNode","ID":"U551B","text":"private: 只可以在客户端缓存,，不能在在代理服务器缓存"},"2":{"objectClass":"MindNode","ID":"W2945","text":"no-cahce: 要求客户端提交缓存信息与服务器端进行验证(协商缓存)"},"3":{"objectClass":"MindNode","ID":"7HC7P","text":"no-store: 不使用缓存，每次都去服务获取数据"},"4":{"objectClass":"MindNode","ID":"S0P34","text":"max-age=xxx: 缓存多少秒后失效"},"objectClass":"NSArray"},"text":"Cache-Control:public, max-age=31536000，在31536000秒后才缓存才失效"},"objectClass":"NSArray"},"text":"Cache-control(http 1.1)"},"1":{"objectClass":"MindNode","ID":"BI1DV","children":{"0":{"objectClass":"MindNode","ID":"L5EH4","text":"Expires: Wed, 21 Oct 2015 07:28:00 GMT，由于服务器端和浏览器端的时间差异问题，浏览器比服务器时间快，会导致缓存失效"},"objectClass":"NSArray"},"text":"Expires(http 1.0)"},"objectClass":"NSArray"},"text":"强缓存（200）"},"1":{"objectClass":"MindNode","ID":"QJ761","children":{"0":{"objectClass":"MindNode","ID":"A6T6O","children":{"0":{"objectClass":"MindNode","ID":"KT13N","children":{"0":{"objectClass":"MindNode","ID":"RDP5X","text":"Last-Modified和If-modified-since"},"1":{"objectClass":"MindNode","ID":"63SB9","text":"ETag和If-None-Match"},"objectClass":"NSArray"},"text":"两组报文"},"objectClass":"NSArray"},"text":""},"objectClass":"NSArray"},"text":"协商缓存（304）"},"objectClass":"NSArray"},"text":"http 缓存"},"8":{"objectClass":"MindNode","ID":"J6B62","children":{"0":{"objectClass":"MindNode","ID":"8V5MX","text":"多路复用，无需多个TCP连接，因为其允许在单一的HTTP2连接上发起多重请求，因此可以不用依赖建立多个TCP连接。"},"1":{"objectClass":"MindNode","ID":"Y75P8","text":"二进制分帧，将所有要传输的消息采用二进制编码，并且会将信息分割为更小的消息块","maxWidthLine":572},"2":{"objectClass":"MindNode","ID":"9LW39","text":"头部压缩，用HPACK技术压缩头部，减小报文大小"},"3":{"objectClass":"MindNode","ID":"F114P","text":"服务端推送，服务端可以在客户端发起请求前发送数据，换句话说，服务端可以对客户端的一个请求发送多个相应，并且资源可以正常缓存。"},"objectClass":"NSArray"},"text":"http2（必须为https）"},"9":{"objectClass":"MindNode","ID":"317BI","children":{"0":{"objectClass":"MindNode","ID":"K8Y4I","children":{"0":{"objectClass":"MindNode","ID":"0R0GB","text":"加载完立即执行 加载过程不阻塞 执行阻塞"},"objectClass":"NSArray"},"text":"async"},"1":{"objectClass":"MindNode","ID":"48Q5T","children":{"0":{"objectClass":"MindNode","ID":"L5F8M","text":"加载完不执行 等到DOMContentLoaded事件前依次执行"},"objectClass":"NSArray"},"text":"defer"},"objectClass":"NSArray"},"text":"异步无阻塞加载JS"},"objectClass":"NSArray"},"text":"性能优化"},"objectClass":"NSArray"},"text":"前端优化"},"ID":"CJ6C8","style":100,"lineKeepThin":true}